#!/usr/bin/env node

/**
 * Module Dependecies
 */

var fs = require('fs')
  , path = require('path')
  , program = require('commander')
  , pkg = require('../package')
  , mongoose = require('mongoose')
  , db = mongoose.createConnection()
  , models = require('../models')
  , Quiz = db.model('Quiz')
  , Question = db.model('Question');

var db_name
  , config
  , host;

db.on('error', function(err){
  console.log(err);
  console.log('could not connect: is mongo running?');
  process.exit();
});

program
  .version(pkg.version)
  .option('-i, --import <file>', 'import quiz data')
  .option('-c, --config <config>', 'use config file')
  .option('--host <localhost>', 'mongodb host')
  .option('--db <quizshow>', 'mongo database')

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ quiz --import examples/trivia.txt');
  console.log('    $ quiz -i examples/questions.json');
  console.log('    $ quiz -i examples/questions.json -c config.js');
  console.log('');
});

program.parse(process.argv);

if ( program.config ) {
  config = require(program.config);
} else {
  config = require('../config');
}

host = program.host || config.MONGO_HOST;
db_name = program.db || config.MONGO_DB;

db.open(host, db_name);

if ( program.import ) {
  console.log(program.import);
  switch ( path.extname(program.import) ) {
    case '.txt':
      parseText(fs.readFileSync(program.import), importQuiz);
      break;
    case '.json':
      parseJSON(require(program.import), importQuiz);
      break;
    default:
      console.log('cannot import:', program.import, 'file');
  }
}

/**
 * Parse question JSON file
 */

function parseJSON (questions, next) {

  var temp = {}
    , quizzes = []
    , min = 50; // minimum question count for import

  questions.forEach(function(question){
    var category = question.category;

    if ( !temp[category] ) {
      temp[category] = {};
    }

    delete question.category;
    if ( !temp[category].questions ) {
      temp[category].questions = [];
    }

    temp[category].questions.push(question);
  });

  // Build Import

  for (var key in temp) {
    var category = temp[key]
      , quiz = {};

    quiz.category = key;
    quiz.questions = category.questions;
    quizzes.push(quiz);
    if ( quiz.questions.length > min ) {
      next(quiz);
    }
  }

}

/**
 * Parse question text file
 */

function parseText (data, next) {

  var temp = {}
    , content = data.toString()
    , lines = content.split(/\n/g)
    , questions = []
    , quiz = { questions: [] }
    , q;

  lines.forEach(function(line){
    if ( line !== '' ) {

      console.log('line', line);

      if ( /^Q:/.test(line) ) {
        q = line.split(/Q: /)[1];
        temp[q] = '';
      }

      if ( /^A:/.test(line) ) {
        temp[q] = line.split(/A: /)[1];
      }

    }
  });

  for (var q in temp) {
    quiz.questions.push({ question: q, answer: temp[q] });
  }

  next(quiz);
}

/**
 * Import Quiz data
 *
 * @param Object data quiz object
 */

function importQuiz (data) {
  var quiz = new Quiz({ name: data.name, format: 'manual' })
    , total = data.questions.length
    , count = 0;

  function next() {
    if ( count === total ) {
      quiz.save(function(err){
        if (err) throw err;
        console.log('quiz saved:', quiz.name);
      });
    }
  }

  data.questions.forEach(function(q){
    var question = new Question(q);
    question.save(function(err){
      if (err) throw err;
      quiz.questions.push(question);
      console.log('count',count,'total',total)
      ++count;
      next();
    });
  });

}

